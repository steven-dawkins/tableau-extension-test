{"version":3,"file":"dashboardLayout.js","mappings":";;;;;;;;;AAEA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sources":["webpack://extensions-api-sdk/./Samples-Typescript/DashboardLayout/dashboardLayout.ts"],"sourcesContent":["import { DashboardLayoutChange, DashboardLayoutChangedEvent, DashboardObject, TableauEvent } from '@tableau/extensions-api-types';\r\n\r\n// Wrap everything in an anonymous function to avoid polluting the global namespace\r\n(async () => {\r\n  class DashboardLayout {\r\n    public dashboardObjects: DashboardObject[];\r\n    private self: DashboardLayout;\r\n\r\n    // Avoid globals.\r\n    constructor(private _$: JQueryStatic) {}\r\n\r\n    /**\r\n     * Initializes the extension\r\n     */\r\n    public async initialize() {\r\n      console.log('Waiting for DOM ready');\r\n      await this._$.ready;\r\n      console.log('Initializing extension API');\r\n      await tableau.extensions.initializeAsync();\r\n\r\n      const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n      this.dashboardObjects = dashboard.objects;\r\n      console.log(this.dashboardObjects);\r\n\r\n      // enabling dashboard event button\r\n      this._$('#dashboard-event-btn').prop('disabled', false);\r\n      this._$('#dashboard-event-btn').click(this.onEventButtonClick.bind(this));\r\n    }\r\n\r\n    // When changes are made to the dashboard we get all the details for each of the\r\n    // dashboard objects that were changed and compare it with their previous values.\r\n    // The dashboardLayoutChangeDetails property is a map of dashboard obj3ct ids to\r\n    // an array of dashboard layout changes.\r\n    // Dashboard layout change events are invoked when dashboard objects are resized,\r\n    // repositioned, added, and more. See DashboardLayoutChange in the API documentation\r\n    // for all possible actions.\r\n    // Extension reloads when worksheets are added / removed.\r\n    private onDashboardLayoutChange(event: TableauEvent) {\r\n      console.log(event);\r\n      const dashboardEvent = event as DashboardLayoutChangedEvent;\r\n      const dashboardEventDetails = dashboardEvent.dashboardLayoutChangeDetails;\r\n      const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n\r\n      // updating dashboard objects and storing the previous dashboard objects for referrence.\r\n      const oldDashboardObjects = this.dashboardObjects;\r\n      this.dashboardObjects = dashboard.objects;\r\n\r\n      // An empty dashboard layout change event may be invoked when loading an extension from the manifest.\r\n      // In this case we ignore it and return.\r\n      if (dashboardEventDetails === undefined || dashboardEventDetails.size === 0) {\r\n        return;\r\n      }\r\n\r\n      // Emptying previous content from the UI's change list.\r\n      this._$('#dashboard-layout-change-list').empty();\r\n\r\n      // Updating UI's change list to display information on the current dashboard event.\r\n      dashboardEventDetails.forEach((changesMade: DashboardLayoutChange[], dashboardObjectId: number) => {\r\n        // getting dashboard object from its id\r\n        const dashboardObject = dashboard.getDashboardObjectById(dashboardObjectId);\r\n\r\n        // building a div for the changes made to this dashboard object.\r\n        const changesDiv = this._$('<div>');\r\n\r\n        // checking if this dashboard object was added as part of the event.\r\n        if (changesMade.includes(tableau.DashboardLayoutChange.Added)) {\r\n          const toAppend = this._$('<h6/>');\r\n          toAppend.text(`Dashboard Object ${dashboardObjectId} added: \"${dashboardObject.name}\"`);\r\n          changesDiv.append(toAppend);\r\n          this._$('#dashboard-layout-change-list').append(changesDiv);\r\n          return;\r\n        }\r\n\r\n        // getting old dashboard object before event to compare it with the current one.\r\n        const oldDashboardObject = oldDashboardObjects.find(o => o.id === dashboardObjectId);\r\n\r\n        // checking if this dashboard object was removed as part of the event.\r\n        if (changesMade.includes(tableau.DashboardLayoutChange.Removed)) {\r\n          const toAppend = this._$('<h6/>');\r\n          toAppend.text(`Dashboard Object ${dashboardObjectId} removed: \"${oldDashboardObject.name}\"`);\r\n          changesDiv.append(toAppend);\r\n          this._$('#dashboard-layout-change-list').append(changesDiv);\r\n          return;\r\n        }\r\n\r\n        // the following dashboard changes are not mutually exclusive, so we list them together.\r\n        const h6 = this._$('<h6/>');\r\n        h6.text(`Dashboard Object ${dashboardObjectId}: \"${dashboardObject.name}\"`);\r\n        changesDiv.append(h6);\r\n        const ul = this._$('<ul/>');\r\n\r\n        // checking if the dashboard object had changes to its floating state.\r\n        if (changesMade.includes(tableau.DashboardLayoutChange.IsFloatingChanged)) {\r\n          const li = this._$('<li/>');\r\n          li.text(`Floating is now ${dashboardObject.isFloating}, was ${oldDashboardObject.isFloating}`);\r\n          ul.append(li);\r\n        }\r\n\r\n        // checking if the dashbaord object had changes to its visibility.\r\n        if (changesMade.includes(tableau.DashboardLayoutChange.IsVisibleChanged)) {\r\n          const li = this._$('<li/>');\r\n          li.text(`Visibility is now ${dashboardObject.isVisible}, was ${oldDashboardObject.isVisible}`);\r\n          ul.append(li);\r\n        }\r\n\r\n        // checking if the dashboard object was repositioned.\r\n        if (changesMade.includes(tableau.DashboardLayoutChange.PositionChanged)) {\r\n          const li = this._$('<li/>');\r\n          const newPos = dashboardObject.position;\r\n          const oldPos = oldDashboardObject.position;\r\n          li.text(`Position is now (${newPos.x},${newPos.y}), was (${oldPos.x},${oldPos.y})`);\r\n          ul.append(li);\r\n        }\r\n\r\n        // checking if the dashboard object was resized.\r\n        if (changesMade.includes(tableau.DashboardLayoutChange.SizeChanged)) {\r\n          const li = this._$('<li/>');\r\n          const newSize = dashboardObject.size;\r\n          const oldSize = oldDashboardObject.size;\r\n          li.text(`Size is now ${newSize.width}x${newSize.height}, was ${oldSize.width}x${oldSize.height}`);\r\n          ul.append(li);\r\n        }\r\n\r\n        // checking if the dashboard object was renamed.\r\n        if (changesMade.includes(tableau.DashboardLayoutChange.NameChanged)) {\r\n          const li = this._$('<li/>');\r\n          li.text(`Name is now \"${dashboardObject.name}\", was \"${oldDashboardObject.name}\"`);\r\n          ul.append(li);\r\n        }\r\n\r\n        changesDiv.append(ul);\r\n        this._$('#dashboard-layout-change-list').append(changesDiv);\r\n      });\r\n    }\r\n\r\n    // This function adds a dashboard event if there is not one already, and removes it if there is.\r\n    private onEventButtonClick() {\r\n      const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n      if ($('#dashboard-event-btn').text() === 'Add Dashboard Event') {\r\n        dashboard.addEventListener(tableau.TableauEventType.DashboardLayoutChanged,\r\n          (event) => this.onDashboardLayoutChange(event));\r\n        $('#dashboard-event-btn').text('Remove Dashboard Event');\r\n      } else {\r\n        dashboard.removeEventListener(tableau.TableauEventType.DashboardLayoutChanged,\r\n          (event) => this.onDashboardLayoutChange(event));\r\n        $('#dashboard-layout-change-list').empty();\r\n        $('#dashboard-event-btn').text('Add Dashboard Event');\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log('Initializing DashboardLayout extension.');\r\n  await new DashboardLayout($).initialize();\r\n})();\r\n"],"names":[],"sourceRoot":""}