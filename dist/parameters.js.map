{"version":3,"file":"parameters.js","mappings":";;;;;;;;;AAOA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA","sources":["webpack://extensions-api-sdk/./Samples-Typescript/Parameters/parameters.ts"],"sourcesContent":["import {\r\n    DataType,\r\n    Parameter,\r\n    ParameterChangedEvent,\r\n    ParameterDomainRestriction\r\n} from '@tableau/extensions-api-types';\r\n\r\n// Wrap everything in an anonymous function to avoid polluting the global namespace\r\n(async () => {\r\n\r\n    class Parameters {\r\n        // Avoid globals\r\n        constructor(private _$: JQueryStatic) { }\r\n\r\n        // This is the entry point into the extension.  It initializes the Tableau Extensions Api, and then\r\n        // grabs all of the parameters in the workbook, processing each one individually.\r\n        public async initialize() {\r\n            console.log('Waiting for DOM ready');\r\n            await this._$.ready;\r\n\r\n            console.log('Initializing extension API');\r\n            await tableau.extensions.initializeAsync();\r\n\r\n            const table = this._$('#parameterTable');\r\n            const tableBody = table.children('tbody');\r\n\r\n            const parameters = await tableau.extensions.dashboardContent.dashboard.getParametersAsync();\r\n            parameters.forEach(function(p) {\r\n                p.addEventListener(tableau.TableauEventType.ParameterChanged, (event) => this.onParameterChange(event));\r\n                this.parameterRow(p).appendTo(tableBody);\r\n            }, this);\r\n\r\n            // This is used to manipulate what part of the UI is visible.  If there are no parameters\r\n            // found, we want to give you a message to tell you that you need to add one, otherwise, we\r\n            // show the table we created.\r\n            this._$('#loading').addClass('hidden');\r\n            if (parameters.length === 0) {\r\n                this._$('#addParameterWarning').removeClass('hidden').addClass('show');\r\n            } else {\r\n                this._$('#parameterTable').removeClass('hidden').addClass('show');\r\n            }\r\n\r\n        }\r\n\r\n        // When the parameter is changed, we recreate the row with the updated values.  This keeps the code\r\n        // clean, and emulates the approach that something like React does where it \"rerenders\" the UI with\r\n        // the updated data.\r\n        //\r\n        // To avoid multiple layout processing in the browser, we build the new row unattached to the DOM,\r\n        // and then attach it at the very end.  This helps avoid jank.\r\n        private onParameterChange(parameterChangeEvent: ParameterChangedEvent) {\r\n            parameterChangeEvent.getParameterAsync().then(function(param) {\r\n                const newRow = this.parameterRow(param);\r\n                // tslint:disable-next-line:quotemark\r\n                const oldRow = this._$(\"tr[data-fieldname='\" + param.id + \"'\");\r\n                oldRow.replaceWith(newRow);\r\n            });\r\n        }\r\n\r\n        //\r\n        // DOM creation methods\r\n        //\r\n\r\n        // A cell in the table\r\n        private cell(value: JQuery<HTMLElement>) {\r\n            const row = this._$('<td>');\r\n            row.append(value);\r\n            return row;\r\n        }\r\n\r\n        // A simple cell that contains a text value\r\n        private textCell(value: string | DataType) {\r\n            const cellElement = this._$('<td>');\r\n            cellElement.text(value);\r\n            return cellElement;\r\n        }\r\n\r\n        // The allowable values column has a complex structure, so to make things easier/cleaner,\r\n        // this function creates the subtree for the value of the allowable values column.\r\n        private allowableValues(value: ParameterDomainRestriction) {\r\n            function termKey(key: string) {\r\n                return $('<dt>').attr('id', key).text(key);\r\n            }\r\n\r\n            function termValue(termVal: string | number, termDefault: string) {\r\n                return $('<dd>').text(termVal || termDefault);\r\n            }\r\n\r\n            const allowable = this._$('<dl class=\"dl-horizontal\">');\r\n\r\n            switch (value.type) {\r\n                case tableau.ParameterValueType.All:\r\n                    allowable.append(termKey('Restrictions'));\r\n                    allowable.append(termValue('None', ''));\r\n                    break;\r\n                case tableau.ParameterValueType.List:\r\n                    value.allowableValues.forEach(function(allowableValue) {\r\n                        allowable.append(termKey('List Value'));\r\n                        allowable.append(termValue(allowableValue.formattedValue, ''));\r\n                    });\r\n                    break;\r\n                case tableau.ParameterValueType.Range:\r\n                    allowable.append(termKey('Min Value'));\r\n                    allowable.append(termValue(value.minValue.formattedValue, 'No Min'));\r\n                    allowable.append(termKey('Max Value'));\r\n                    allowable.append(termValue(value.maxValue.formattedValue, 'No Max'));\r\n                    allowable.append(termKey('Step Size'));\r\n                    allowable.append(termValue(value.stepSize, 'default'));\r\n                    break;\r\n                default:\r\n                    console.error('Unknown Parameter value type: ' + value.type);\r\n            }\r\n\r\n            return allowable;\r\n        }\r\n\r\n        // This function creates a subtree of a row for a specific parameter.\r\n        private parameterRow(p: Parameter) {\r\n            const row = this._$('<tr>').attr('data-fieldname', p.id);\r\n            row.append(this.textCell(p.name));\r\n            row.append(this.textCell(p.dataType));\r\n            row.append(this.textCell(p.currentValue.formattedValue));\r\n            row.append(this.cell(this.allowableValues(p.allowableValues)));\r\n\r\n            return row;\r\n        }\r\n    }\r\n\r\n    console.log('Initializing Parameters extension.');\r\n    await new Parameters($).initialize();\r\n})();\r\n"],"names":[],"sourceRoot":""}