{"version":3,"file":"vizImage.js","mappings":";;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sources":["webpack://extensions-api-sdk/./Samples-Typescript/VizImage/vizImage.ts"],"sourcesContent":["import { MarkType } from '@tableau/extensions-api-types';\r\n\r\n// Wrap everything in an anonymous function to avoid polluting the global namespace\r\n(async () => {\r\n  class VizImage {\r\n    // Avoid globals.\r\n    constructor(private _$: JQueryStatic) { }\r\n\r\n    /**\r\n     * Initializes the extension\r\n     */\r\n    public async initialize() {\r\n      console.log('Waiting for DOM ready');\r\n      await this._$.ready;\r\n      console.log('Initializing extension API');\r\n      await tableau.extensions.initializeAsync();\r\n\r\n      await this.addVizImage(tableau.MarkType.Bar, 'tableau20_10_0');\r\n\r\n      const markSelector = this._$('#mark-select');\r\n      const colorSelector = this._$('#color-select');\r\n\r\n      markSelector.prop('disabled', false);\r\n      colorSelector.prop('disabled', false);\r\n\r\n      // updating viz images with new values upon a selector change\r\n      markSelector.change(() => {\r\n        this.addVizImage(markSelector.val() as MarkType, colorSelector.val() as string);\r\n      });\r\n      colorSelector.change(() => {\r\n        this.addVizImage(markSelector.val() as MarkType, colorSelector.val() as string);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Builds the input specifications and displays the created viz image\r\n     * @param markType\r\n     * @param colorPalette\r\n     */\r\n    private async addVizImage(markType: MarkType, palette: string) {\r\n      // Building the input specification object that is used to create the viz image\r\n      // Data values used in the viz image are prefilled\r\n      const vizInputSpec = {\r\n        data: {\r\n          values: [\r\n            {Product: 'Paper', Sales: 28, Region: 'Central'},\r\n            {Product: 'Pens', Sales: 45, Region: 'East'},\r\n            {Product: 'Rulers', Sales: 35, Region: 'East'},\r\n            {Product: 'Rulers', Sales: 43, Region: 'South'},\r\n            {Product: 'Paper', Sales: 50, Region: 'West'},\r\n            {Product: 'Pens', Sales: 56, Region: 'West'}\r\n          ]\r\n        },\r\n        description: 'A sample viz', // optional parameter\r\n        encoding: {\r\n          color: {field: 'Product', type: tableau.VizImageEncodingType.Discrete, palette},\r\n          columns: {field: 'Region', type: tableau.VizImageEncodingType.Discrete},\r\n          rows: {field: 'Sales', type: tableau.VizImageEncodingType.Continuous}\r\n        },\r\n        mark: markType,\r\n        markcolor: '#FFED5F', // may not get used in viz if color is encoded in viz\r\n        size: {width: 400, height: 300}\r\n      };\r\n\r\n      // defaulting values if null\r\n      if (markType === null) {\r\n        vizInputSpec.mark = tableau.MarkType.Bar;\r\n      }\r\n      if (palette === null) {\r\n        vizInputSpec.encoding.color.palette = 'tableau20_10_0';\r\n      }\r\n\r\n      const svg = await tableau.extensions.createVizImageAsync(vizInputSpec);\r\n      // making call to create viz image from the input specifications\r\n      const blob = new Blob([svg], { type: 'image/svg+xml' });\r\n      const url = URL.createObjectURL(blob);\r\n      const image = document.createElement('img');\r\n      image.src = url;\r\n      image.style.maxWidth = '100%';\r\n      image.style.maxHeight = '100%';\r\n      image.className = 'center-block';\r\n      const vizApiElement = document.getElementById('viz-container');\r\n      // clearing UI and adding in new viz\r\n      vizApiElement.innerHTML = '';\r\n      vizApiElement.appendChild(image);\r\n      image.addEventListener('load', () => URL.revokeObjectURL(url), { once: true });\r\n    }\r\n  }\r\n\r\n  console.log('Initializing VizImage extension.');\r\n  await new VizImage($).initialize();\r\n})();\r\n"],"names":[],"sourceRoot":""}