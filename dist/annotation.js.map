{"version":3,"file":"annotation.js","mappings":";;;;;;;;;AAEA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sources":["webpack://extensions-api-sdk/./Samples-Typescript/Annotation/annotation.ts"],"sourcesContent":["import { MarksSelectedEvent, TableauEvent, Worksheet } from '@tableau/extensions-api-types';\r\n\r\n// Wrap everything in an anonymous function to avoid polluting the global namespace\r\n(async () => {\r\n  class Annotation {\r\n    private worksheets: Worksheet[];\r\n    private currentWorksheet: Worksheet;\r\n    private self: Annotation;\r\n\r\n    // Avoid globals.\r\n    constructor(private _$: JQueryStatic) {}\r\n\r\n    /**\r\n     * Initializes the extension\r\n     */\r\n    public async initialize() {\r\n      console.log('Waiting for DOM ready');\r\n      await this._$.ready;\r\n      console.log('Initializing extension API');\r\n      await tableau.extensions.initializeAsync();\r\n\r\n      this.worksheets = tableau.extensions.dashboardContent.dashboard.worksheets;\r\n      if (this.worksheets.length === 0) {\r\n        return;\r\n      }\r\n      // populating selection menu with worksheets\r\n      this.worksheets.forEach((worksheet, index) => {\r\n        const menuOption = this._$('<option>').val(index).text(worksheet.name);\r\n        this._$('#worksheet-selection').append(menuOption);\r\n      });\r\n      // selecting the first worksheet by default\r\n      this.currentWorksheet = this.worksheets[0];\r\n      this.currentWorksheet.addEventListener(tableau.TableauEventType.MarkSelectionChanged, this.onMarksSelectedEvent);\r\n      // adding functionality to selection menu\r\n      this._$('#worksheet-selection').on('click', this.onMenuSelection.bind(this));\r\n      this._$('#worksheet-selection').prop('disabled', false);\r\n    }\r\n\r\n    // Upon selecting marks, the worksheet will generate annotations replacing the previous ones\r\n    private async onMarksSelectedEvent(event: TableauEvent) {\r\n      const markSelectedEvent = event as MarksSelectedEvent;\r\n      const worksheet = markSelectedEvent.worksheet;\r\n      const marksCollection = await markSelectedEvent.getMarksAsync();\r\n      // In most cases the marksCollection will have a single data table\r\n      const dataTable = marksCollection.data[0];\r\n      const marksInfo = dataTable.marksInfo;\r\n      // returning if no marks were selected\r\n      if (marksInfo.length === 0) {\r\n        return;\r\n      }\r\n\r\n      // clearing the current annotations\r\n      const annotations = await worksheet.getAnnotationsAsync();\r\n      for (const annotation of annotations) {\r\n        await worksheet.removeAnnotationAsync(annotation);\r\n      }\r\n\r\n      // adding annotations for each of the selected marks\r\n      marksInfo.forEach(async (markInfo, rowIndex) => {\r\n        // getting data values corresponding to each markInfo\r\n        const rowData = dataTable.data[rowIndex];\r\n        // building annotation text\r\n        let annotationText = '';\r\n        dataTable.columns.forEach((column, colIndex) => {\r\n          annotationText += `${column.fieldName}: ${rowData[colIndex].formattedValue}\\n`;\r\n        });\r\n        await worksheet.annotateMarkAsync(markInfo, annotationText);\r\n      });\r\n    }\r\n\r\n    // This function will clear annotations and start listening for marks on the newly selected worksheet.\r\n    private async onMenuSelection() {\r\n      const selectedWorksheet = this.worksheets[this._$('#worksheet-selection option:selected').val() as number];\r\n      if (this.currentWorksheet === selectedWorksheet) {\r\n        return;\r\n      }\r\n      // deactivating current worksheet and clearing annotations\r\n      this.currentWorksheet.removeEventListener(\r\n        tableau.TableauEventType.MarkSelectionChanged,\r\n        this.onMarksSelectedEvent,\r\n      );\r\n      const annotations = await this.currentWorksheet.getAnnotationsAsync();\r\n      for (const annotation of annotations) {\r\n        await this.currentWorksheet.removeAnnotationAsync(annotation);\r\n      }\r\n      // activating selected worksheet\r\n      selectedWorksheet.addEventListener(tableau.TableauEventType.MarkSelectionChanged, this.onMarksSelectedEvent);\r\n      this.currentWorksheet = selectedWorksheet;\r\n    }\r\n  }\r\n\r\n  console.log('Initializing Annotation extension.');\r\n  await new Annotation($).initialize();\r\n})();\r\n"],"names":[],"sourceRoot":""}