{"version":3,"file":"datasources.js","mappings":";;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sources":["webpack://extensions-api-sdk/./Samples-Typescript/DataSources/datasources.ts"],"sourcesContent":["import { DataSource } from '@tableau/extensions-api-types';\r\n\r\n// Wrap everything in an anonymous function to avoid polluting the global namespace\r\n(async () => {\r\n  class DataSources {\r\n    // Avoid globals.\r\n    constructor(private _$: JQueryStatic) { }\r\n\r\n    /**\r\n     * Refreshes the given dataSource\r\n     * @param dataSource\r\n     */\r\n    private static async refreshDataSource(dataSource: DataSource) {\r\n      await dataSource.refreshAsync();\r\n      console.log(dataSource.name + ': Refreshed Successfully');\r\n    }\r\n\r\n    /**\r\n     * Initializes the extension\r\n     */\r\n    public async initialize() {\r\n      console.log('Waiting for DOM ready');\r\n      await this._$.ready;\r\n      console.log('Initializing extension API');\r\n      await tableau.extensions.initializeAsync();\r\n\r\n      // Since dataSource info is attached to the worksheet, we will perform\r\n      // one async call per worksheet to get every dataSource used in this\r\n      // dashboard.  This demonstrates the use of Promise.all to combine\r\n      // promises together and wait for each of them to resolve.\r\n      const dataSourceFetchPromises: Array<Promise<DataSource[]>> = [];\r\n\r\n      // To get dataSource info, first get the dashboard.\r\n      const dashboard = tableau.extensions.dashboardContent.dashboard;\r\n      // Then loop through each worksheet and get its dataSources, save promise for later.\r\n      dashboard.worksheets.forEach(worksheet => dataSourceFetchPromises.push(worksheet.getDataSourcesAsync()));\r\n      const fetchResults = await Promise.all(dataSourceFetchPromises);\r\n\r\n      // Maps dataSource id to dataSource so we can keep track of unique dataSources.\r\n      const dataSourcesCheck = {};\r\n      const dashboardDataSources: DataSource[] = [];\r\n\r\n      fetchResults.forEach(dss => {\r\n        dss.forEach(ds => {\r\n          if (!dataSourcesCheck[ds.id]) {\r\n            // We've already seen it, skip it.\r\n            dataSourcesCheck[ds.id] = true;\r\n            dashboardDataSources.push(ds);\r\n          }\r\n        });\r\n      });\r\n\r\n      this.buildDataSourcesTable(dashboardDataSources);\r\n\r\n      // This just modifies the UI by removing the loading banner and showing the dataSources table.\r\n      this._$('#loading').addClass('hidden');\r\n      this._$('#dataSourcesTable')\r\n        .removeClass('hidden')\r\n        .addClass('show');\r\n    }\r\n\r\n    /**\r\n     * Displays a modal dialog with more details about the given dataSource.\r\n     * @param dataSource\r\n     */\r\n    private async showModal(dataSource: DataSource) {\r\n      const modal = this._$('#infoModal');\r\n\r\n      this._$('#nameDetail').text(dataSource.name);\r\n      this._$('#idDetail').text(dataSource.id);\r\n      this._$('#typeDetail').text((dataSource.isExtract) ? 'Extract' : 'Live');\r\n\r\n      // Loop through every field in the dataSource and concat it to a string.\r\n      let fieldNamesStr = '';\r\n      dataSource.fields.forEach(function(field) {\r\n        fieldNamesStr += field.name + ', ';\r\n      });\r\n      // Slice off the last \", \" for formatting.\r\n      this._$('#fieldsDetail').text(fieldNamesStr.slice(0, -2));\r\n\r\n      // Loop through each connection summary and list the connection's\r\n      // name and type in the info field\r\n      const connectionSummaries = await dataSource.getConnectionSummariesAsync();\r\n      let connectionsStr = '';\r\n      connectionSummaries.forEach(function(summary) {\r\n        connectionsStr += summary.name + ': ' + summary.type + ', ';\r\n      });\r\n      // Slice of the last \", \" for formatting.\r\n      this._$('#connectionsDetail').text(connectionsStr.slice(0, -2));\r\n\r\n      // Loop through each table that was used in creating this datasource\r\n      const activeTables = await dataSource.getActiveTablesAsync();\r\n      let tableStr = '';\r\n      activeTables.forEach(function(table) {\r\n        tableStr += table.name + ', ';\r\n      });\r\n      // Slice of the last \", \" for formatting.\r\n      this._$('#activeTablesDetail').text(tableStr.slice(0, -2));\r\n\r\n      // @ts-ignore\r\n      modal.modal('show');\r\n    }\r\n\r\n    /**\r\n     * Constructs UI that displays all the dataSources in this dashboard\r\n     * given a mapping from dataSourceId to dataSource objects.\r\n     * @param dataSources\r\n     */\r\n    private buildDataSourcesTable(dataSources: DataSource[]) {\r\n      // Clear the table first.\r\n      this._$('#dataSourcesTable > tbody tr').remove();\r\n      const dataSourcesTable = this._$('#dataSourcesTable > tbody')[0];\r\n\r\n      // Add an entry to the dataSources table for each dataSource.\r\n      for (const dataSource of dataSources) {\r\n        // @ts-ignore\r\n        const newRow = dataSourcesTable.insertRow(dataSourcesTable.rows.length);\r\n        const nameCell = newRow.insertCell(0);\r\n        const refreshCell = newRow.insertCell(1);\r\n        const infoCell = newRow.insertCell(2);\r\n\r\n        const refreshButton = document.createElement('button');\r\n        refreshButton.innerHTML = 'Refresh Now';\r\n        refreshButton.type = 'button';\r\n        refreshButton.className = 'btn btn-primary';\r\n        refreshButton.addEventListener('click', () => DataSources.refreshDataSource(dataSource));\r\n\r\n        const infoSpan = document.createElement('span');\r\n        infoSpan.className = 'glyphicon glyphicon-info-sign';\r\n        infoSpan.addEventListener('click', () => this.showModal(dataSource));\r\n\r\n        nameCell.innerHTML = dataSource.name;\r\n        refreshCell.appendChild(refreshButton);\r\n        infoCell.appendChild(infoSpan);\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log('Initializing DataSources extension.');\r\n  await new DataSources($).initialize();\r\n})();\r\n"],"names":[],"sourceRoot":""}